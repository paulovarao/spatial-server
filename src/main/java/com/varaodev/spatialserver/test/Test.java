package com.varaodev.spatialserver.test;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import com.varaodev.spatialserver.model.MapPoint;
import com.varaodev.spatialserver.model.SatellitePosition;

public class Test {

	public static void main(String[] args) throws IOException {
		
		List<Integer> list = List.of(1, 2, 3, 4, 5, 6);
		Set<Integer> set = Set.of(3, 2);
		
		boolean result = false;
		for (int i = 1; i < list.size(); i++) {
			List<Integer> subList = list.subList(i-1, i+1);
			Set<Integer> testSet = new HashSet<>(subList);
			result = testSet.equals(set);
			if (result) break;
		}
//		boolean b = list.containsAll(set);
		
		System.out.println(result);
		
	}
	
	protected static void forTest() throws IOException {
		File file = new File("C:\\Users\\Paulo Varão\\Downloads\\QGIS\\test2.txt");
		List<String> lines = Files.readAllLines(Paths.get(file.toURI()));
		
		List<SatellitePosition> positions = lines.stream()
				.flatMap(l -> Arrays.asList(l.split(";")).stream().map(s -> getPosition(s) ))
				.collect(Collectors.toList());
		
		List<String> output = new ArrayList<>();
		output.add("longitude,inclination,delta");
		double prevInclination = 0;
		for (int i = 1; i < positions.size(); i++) {
			SatellitePosition p = positions.get(i);
			MapPoint mp1 = positions.get(i-1).toMapPoint();
			MapPoint mp2 = p.toMapPoint();
			double longitude = p.getLongitude();
			double inclination = mp1.inclinationAngle(mp2) / MapPoint.DEGREES_TO_RADIANS;
			double delta = i == 1 ? 0 : inclination - prevInclination;
			String data = longitude + "," + inclination + "," + delta;
			output.add(data);
			prevInclination = inclination;
		}
		
		file = new File("C:\\Users\\Paulo Varão\\Downloads\\QGIS\\output.txt");
		Files.write(Paths.get(file.toURI()), output, StandardCharsets.UTF_8);
//		SatelliteService service = new SatelliteService();
//		List<SatellitePosition> positions = samples();
//		StdPolygon result = service.fieldOfRegard(positions, 35.0, 10.0);
//		System.out.println(result);
	}
	
	protected static List<SatellitePosition> samples() {
//		String data = "-26.352582707539703,-82.00266447824686,526.087569166195;-26.77256867230793,-82.02751602522729,526.0918724951889;-27.195115572984797,-82.0519504457871,526.096126492178;-27.62022029966903,-82.07596484263293,526.1003313125893;-28.047827048090106,-82.09955344839967,526.1044866055336;-28.4779299282436,-82.12271342509007,526.1085925288398;-28.910504632267443,-82.14544098479938,526.1126490703937;-29.34552547944612,-82.16773236679843,526.1166562182862;-29.782965397195326,-82.18958384002065,526.1206139608203;-30.22279591679635,-82.21099170558396,526.1245222865382;-30.66498715856126,-82.23195229934693,526.128381184144;-31.10952575573081,-82.25246281055038,526.1321907948986;-31.556343221036936,-82.27251800185614,526.1359508014248;-32.0054232463596,-82.2921151632403,526.1396613473607;-32.456730253602224,-82.31125079564971,526.1433224223074;-32.910227236181115,-82.32992144794339,526.146934016062;-33.36587575674791,-82.34812371958247,526.1504961186765;-33.823635951378996,-82.36585426332597,526.1540087203712;-34.28348507484773,-82.38311047258246,526.1574719499449;-34.74534342269954,-82.39988772621531,526.1608855193908;-35.20918534844987,-82.41618355691988,526.164249559939;-35.674965349041585,-82.43199485766179,526.1675640626881;-36.14263654190126,-82.44731858817964,526.1708290189363;-36.61215067929357,-82.46215177764536,526.1740444202296;-37.0834581632124,-82.47649152730173,526.1772102583045;-37.55650807050485,-82.49033501307501,526.1803265251228;-38.03126730578135,-82.50368001496946,526.1833933352473;-38.507644155595784,-82.51652279210002,526.1864104342894;-38.98560292317644,-82.52886130670767,526.1893779392294;-39.46508761806124,-82.54069305883586,526.1922958429168;-39.94604105860409,-82.552015635678,526.1951641383548;-40.42840490128837,-82.56282671391888,526.1979828188196;-40.91211967932318,-82.5731240620133,526.2007518777482;-41.39714437507261,-82.58290592553261,526.2034714172478;-41.883378359033344,-82.5921694758821,526.2061412123912;-42.37077851440524,-82.60091317373399,526.2087613676931;-42.859281272292186,-82.60913517598738,526.2113318774809;-43.34882214988018,-82.61683374159448,526.2138527362895;-43.83933579897031,-82.62400723336286,526.2163239388874;-44.330756050415786,-82.63065411966214,526.2187454802352;-44.82303579145241,-82.63677321157368,526.2211174499516;-45.316067759721264,-82.64236270090706,526.223439652571;-45.80980343554527,-82.64742163876785,526.2257121801595;-46.3041739062754,-82.65194893081018,526.2279350285316;-46.79910971063561,-82.65594359522424,526.2301081937339;-47.29454089975561,-82.65940476379525,526.232231672041;-47.790397093375944,-82.66233168284327,526.2343054599169;-48.28660754075174,-82.66472371404187,526.2363295540663;-48.78312116470044,-82.66658039903484,526.23830402982;-49.279826704167036,-82.66790118275756,526.240228725449;-49.77667263666341,-82.66868586209165,526.242103718715;-50.27358734712939,-82.66893426582713,526.2439290071707;-50.77049915932107,-82.66864634032187,526.2457045886022;-51.26733640120826,-82.66782214956079,526.2474304609696;-51.764027464523124,-82.66646187508591,526.2491066224984;-52.2605208372643,-82.66456572873945,526.2507331360257;-52.756705280248546,-82.66213427904,526.2523098693109;-53.252529736622414,-82.65916799299139,526.2538368876376;-53.747923483706614,-82.65566751910286,526.2553141900671;-54.242816173807924,-82.65163362117349,526.2567417758892;-54.7371378949857,-82.64706717746378,526.2581196445826;-55.230819229312836,-82.64196917974554,526.259447795851;-55.723791309207925,-82.63634073223328,526.2607262296378;-56.216005664797265,-82.63018279202646,526.2619549945011;-56.70735509469059,-82.62349718009524,526.2631339919299;-57.1977925428226,-82.61628509332499,526.2642632729185;-57.68725190511286,-82.60854807274819,526.2653428382637;-58.17566790081261,-82.60028776482112,526.2663726889668;-58.662976118919644,-82.59150591970848,526.2673528262285;-59.14911306861298,-82.5822043894739,526.2682832514993;-59.63403570682124,-82.57238472072922,526.269164000837;-60.11764349534101,-82.56204975374347,526.2699950052611;-60.599895500159384,-82.55120124987772,526.2707763032531;-61.08073234232499,-82.53984144895249,526.2715078971105;-61.56009577286734,-82.52797268237109,526.272189789358;-62.03792870291364,-82.51559737083453,526.2728219827004;-62.514175241945026,-82.50271802199649,526.2734044800764;-62.98878072518185,-82.48933722805911,526.2739372846381;-63.46171073764759,-82.47545709490032,526.274420418199;-63.93287509858232,-82.46108149334448,526.2748538454543;-64.4022420524574,-82.44621270592238,526.275237590643;-64.8697621099069,-82.43085363803645,526.2755716577749;-65.33538713376636,-82.41500726694095,526.2758560510765;-65.79907035085886,-82.3986766391022,526.276090774998;-66.26076637203653,-82.38186486753581,526.276275834196;-66.72044965606858,-82.3645744239308,526.2764112379782;-67.1780406258794,-82.34680993770993,526.2764969805394;-67.63351664517279,-82.32857401938574,526.2765330736329;-68.08683796519823,-82.30987002127698,526.2765195227794;-68.5379662636711,-82.29070134877433,526.2764563337096;-68.98686464880909,-82.2710714576446,526.2763435123479;-69.43349765899029,-82.2509838513416,526.2761810648772;-69.87784909524707,-82.23044124278138,526.2759689881332;-70.31985059806058,-82.20944887583956,526.275707305781;-70.75948890878232,-82.1880095637113,526.2753960170794;-71.19673426398701,-82.16612697405338,526.2750351290551;-71.63155830551143,-82.14380480904698,526.2746246489296;-72.06393407633502,-82.1210468028441,526.2741645841606;-72.49383600368692,-82.09785671904861,526.2736549424208;-72.92123989369738,-82.07423834823095,526.2730957315671;-73.34613995587479,-82.05019452967508,526.2724869342164;-73.76848051064802,-82.02573103537316,526.2718286076497;-74.18825854675964,-82.00085076349123,526.2711207368911;-74.60545521844814,-81.97555758845404,526.2703633306928;-75.02005297300997,-81.9498553998661,526.2695563979678;-75.43203553332219,-81.92374810029735,526.2686999479201;-75.84138787575304,-81.89723960311568,526.2677939898949;-76.24811251948988,-81.87033273992385,526.2668384940644;-76.65216415695959,-81.84303360454842,526.2658335471106;-77.05354781149317,-81.81534505573835,526.2647791216059;-77.45225325559883,-81.78727102945192,526.2636752277776";
		String data = "-179.6582825094814,74.88281881618957,515.4318919220223;-179.78125293731784,74.93781840714048,515.4376383750987;-179.9050728191385,74.99275544608065,515.443351466849;179.97024946073228,75.04762924890204,515.4490311584595;179.84470542260058,75.10243912219319,515.4546774113396";
		String[] array = data.split(";");
		List<String> list = Arrays.asList(array);
		
		System.out.println(list.size());
		
		List<SatellitePosition> positions = list.stream()
				.map(s -> getPosition(s)).collect(Collectors.toList());
		return positions;
	}
	
	private static SatellitePosition getPosition(String data) {
		String[] array = data.split(",");
		Double longitude = Double.parseDouble(array[0]);
		Double latitude = Double.parseDouble(array[1]);
		Double altitude = Double.parseDouble(array[2]);
		return new SatellitePosition(longitude, latitude, altitude, null);
	}
	
}
